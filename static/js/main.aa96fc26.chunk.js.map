{"version":3,"sources":["redux/actions.js","redux/reducer.js","components/TodoUser.js","components/TodoItemHandler.js","components/TodoItem.js","components/TodoListHandler.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["DISPLAY_USERS","DISPLAY_TODOS","FILTER_CHANGED","REMOVE_TODO_ITEM","displayUsers","payloadUsers","type","payload","displayTodos","payloadTodos","initialState","requested","loadedUsers","loadedTodos","todos","users","filteredTodos","actionHandlers","_actionHandlers","Object","defineProperty","state","objectSpread","action","filter","todo","title","includes","target","value","newTodos","index","TodoUser","props","nameText","username","email","website","phone","react_default","a","createElement","TodoItemHandler","connect","dispatch","removeTodoItem","completed","user","name","className","onClick","TodoListHandler","handleClick","_loadData","asyncToGenerator","regenerator_default","mark","_callee","url","usersPromise","todosPromise","_ref","_ref2","usersResponse","todosResponse","wrap","_context","prev","next","fetch","concat","Promise","all","sent","slicedToArray","json","stop","apply","this","arguments","loadData","filterChanged","event","userMap","reduce","acc","id","map","key","userId","placeholder","onChange","disabled","store","createStore","length","undefined","handler","applyMiddleware","thunk","App","es","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aa96fc26.chunk.js","sourcesContent":["export const REQUESTED = 'requested';\nexport const DISPLAY_USERS = 'users_ready';\nexport const DISPLAY_TODOS = 'todos_ready';\nexport const FILTER_CHANGED = 'new_filter';\nexport const REMOVE_TODO_ITEM = 'remove_Item';\n\nexport function handleClick() {\n  return (dispatch) => {\n    dispatch({\n      type: 'requested',\n    });\n\n    loadData();\n\n    async function loadData() {\n      const url = 'https://jsonplaceholder.typicode.com/';\n      const usersPromise = fetch(`${url}users`);\n      const todosPromise = fetch(`${url}todos`);\n\n      const [\n        usersResponse,\n        todosResponse,\n      ] = await Promise.all([\n        usersPromise,\n        todosPromise,\n      ]);\n\n      const users = await usersResponse.json();\n      const todos = await todosResponse.json();\n\n      const payloadTodos = {\n        loadedTodos: true,\n        todos,\n        filteredTodos: todos,\n      };\n\n      const payloadUsers = {\n        loadedUsers: true,\n        users,\n      };\n\n      dispatch(displayTodos(payloadTodos));\n      dispatch(displayUsers(payloadUsers));\n    }\n  };\n}\n\nexport function filterChanged(payload) {\n  return {\n    type: FILTER_CHANGED,\n    payload,\n  };\n}\n\nexport function displayUsers(payloadUsers) {\n  return {\n    type: DISPLAY_USERS,\n    payload: payloadUsers,\n  };\n}\n\nexport function displayTodos(payloadTodos) {\n  return {\n    type: DISPLAY_TODOS,\n    payload: payloadTodos,\n  };\n}\n\nexport function removeTodoItem(payload) {\n  return {\n    type: REMOVE_TODO_ITEM,\n    payload,\n  };\n}\n","import {\n  REQUESTED,\n  DISPLAY_USERS,\n  DISPLAY_TODOS,\n  FILTER_CHANGED,\n  REMOVE_TODO_ITEM,\n} from './actions';\n\nconst initialState = {\n  requested: false,\n  loadedUsers: false,\n  loadedTodos: false,\n  todos: null,\n  users: null,\n  filteredTodos: null,\n};\n\nconst actionHandlers = {\n  [REQUESTED]: state => ({\n    ...state,\n    requested: true,\n  }),\n  [DISPLAY_USERS]: (state, action) => ({\n    ...state,\n    loadedUsers: action.payload.loadedUsers,\n    users: action.payload.users,\n  }),\n\n  [DISPLAY_TODOS]: (state, action) => ({\n    ...state,\n    loadedTodos: true,\n    todos: action.payload.todos,\n    filteredTodos: action.payload.todos,\n  }),\n  [FILTER_CHANGED]: (state, action) => ({\n    ...state,\n    filteredTodos: state.todos.filter(todo => todo.title.includes(action.payload.target.value)),\n  }),\n  [REMOVE_TODO_ITEM]: (state, action) => {\n    const newTodos = state.todos.filter((todo, index) => index !== action.payload);\n    return {\n      ...state,\n      filteredTodos: newTodos,\n      todos: newTodos,\n    };\n  },\n};\n\nexport const reducer = (state = initialState, action) => {\n  const handler = actionHandlers[action.type];\n  return handler\n    ? handler(state, action)\n    : state;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport function TodoUser(props) {\n  const {\n    nameText,\n    username,\n    email,\n    website,\n    phone,\n  } = props;\n\n  return (\n    <section>\n      <h3>{nameText}</h3>\n      <h5>{username}</h5>\n      <p>{email}</p>\n      <span>{website}</span>\n      <span>{phone}</span>\n    </section>\n  );\n}\n\nTodoUser.propTypes = {\n  nameText: PropTypes.string.isRequired,\n  username: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  website: PropTypes.string.isRequired,\n  phone: PropTypes.string.isRequired,\n};\n","import { connect } from 'react-redux';\nimport { removeTodoItem } from '../redux/actions';\nimport { TodoItem } from './TodoItem';\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    removeTodoItem: index => dispatch(removeTodoItem(index)),\n  };\n}\n\nexport const TodoItemHandler = connect(null, mapDispatchToProps)(TodoItem);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoUser } from './TodoUser';\n\nexport function TodoItem(props) {\n  const {\n    completed,\n    title,\n    index,\n    removeTodoItem,\n    user,\n  } = props;\n\n  const {\n    name,\n    username,\n    email,\n    phone,\n    website,\n  } = user;\n\n  return (\n    <tr>\n      <td>\n        <h5>{title}</h5>\n        <input className=\"button_remove\" type=\"button\" onClick={() => removeTodoItem(index)} value=\"Remove Todo\" />\n      </td>\n      <td>\n        <span>{completed ? 'Yes' : 'No'}</span>\n      </td>\n      <td>\n        <TodoUser nameText={name} username={username} email={email} phone={phone} website={website} />\n      </td>\n    </tr>\n  );\n}\n\nTodoItem.propTypes = {\n  completed: PropTypes.bool.isRequired,\n  title: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  removeTodoItem: PropTypes.func.isRequired,\n  user: PropTypes.objectOf(PropTypes.string).isRequired,\n};\n","import { connect } from 'react-redux';\nimport { TodoList } from './TodoList';\nimport { filterChanged, handleClick } from '../redux/actions';\n\nfunction mapStateToProps(state) {\n  return {\n    requested: state.requested,\n    loadedUsers: state.loadedUsers,\n    loadedTodos: state.loadedTodos,\n    todos: state.todos,\n    filteredTodos: state.filteredTodos,\n    users: state.users,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    handleClick: () => dispatch(handleClick()),\n    filterChanged: event => dispatch(filterChanged(event)),\n  };\n}\n\nexport const TodoListHandler = connect(mapStateToProps, mapDispatchToProps)(TodoList);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItemHandler } from './TodoItemHandler';\n\nexport function TodoList(props) {\n  const {\n    requested,\n    handleClick,\n    loadedUsers,\n    loadedTodos,\n    users,\n    filteredTodos,\n    filterChanged,\n  } = props;\n  if (!requested) {\n    return <input className=\"button\" type=\"button\" onClick={handleClick} value=\"Click me to download todos!\" />;\n  } if (loadedUsers && loadedTodos) {\n    const userMap = users.reduce((acc, user) => ({ ...acc, [user.id]: user }), {});\n\n    const todos = filteredTodos.map((todo, index) => (\n      <TodoItemHandler\n        title={todo.title}\n        completed={todo.completed}\n        key={todo.id}\n        user={userMap[todo.userId]}\n        index={index}\n      />\n    ));\n\n    return (\n      <div>\n        <input className=\"button_search\" type=\"text\" placeholder=\"search by title\" onChange={filterChanged} />\n        <table>\n          <thead>\n            <tr>\n              <th>Title</th>\n              <th>Completed</th>\n              <th>User</th>\n            </tr>\n          </thead>\n          <tbody>\n            {todos}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n  return (\n    <input className=\"button\" type=\"button\" disabled value=\"Loading...\" />\n  );\n}\n\nTodoList.propTypes = {\n  requested: PropTypes.bool.isRequired,\n  handleClick: PropTypes.func.isRequired,\n  loadedUsers: PropTypes.bool.isRequired,\n  loadedTodos: PropTypes.bool.isRequired,\n  users: PropTypes.arrayOf(PropTypes.object).isRequired,\n  filteredTodos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  filterChanged: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.css';\nimport { applyMiddleware, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { reducer } from './redux/reducer';\nimport { TodoListHandler } from './components/TodoListHandler';\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <TodoListHandler />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}